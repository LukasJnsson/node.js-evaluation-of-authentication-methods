<!DOCTYPE html>
<html lang="en">
<head>
      <meta charset="utf-8">
      <title>node.js-end-to-end-encrypted-platform</title>
      <meta name="generator" content={Astro.generator} />
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
	  <title>Passkeys</title>
</head>
<body>
    <form id="signup">
		<h2>Sign up</h2>
        <label for="username">Email</label>
        <input id="username" name="username" /><br />

		<label for="reg_fname">First Name</label>
		<input id="reg_fname" name="reg_fname" /><br />

		<label for="reg_lname">Last Name</label>
		<input id="reg_lname" name="reg_lname" /><br />

		<label for="reg_pnum">Personal Number</label>
		<input id="reg_pnum" name="reg_pnum" /><br />

        <button>Sign up with passkeys</button>
    </form>
    <form id="login" class="hidden">
	    <h2>Sign in</h2>
		<input id="usernameLogin" name="usernameLogin" /><br />
        <button>Sign in with passkeys</button>
    </form>
	<p id="isLoggedIn" class="hidden">Not signed in.</p>
    <script>
        import auth from "../authenticate";

        const users = [];

        const signup = document.getElementById("signup");
        const login = document.getElementById("login");
        const loggedIn = document.getElementById("isLoggedIn");
        const usernameLogin = document.getElementById("usernameLogin");

        signup.addEventListener("submit", async (e) => {
            e.preventDefault();
            const formData = new FormData(signup);
            const username = formData.get("username");
            if (typeof username !== "string" || username.length < 1) return;
            const user = await auth.signUp(username);

            let firstName = document.forms["signup"]["reg_fname"].value;
            let lastName = document.forms["signup"]["reg_lname"].value
            let personalNumber = document.forms["signup"]["reg_pnum"].value
            users.push({username: username, firstName: firstName, lastName: lastName, personalNumber: personalNumber});

            signup.classList.add("hidden");
            login.classList.remove("hidden"); 
        });

        login.addEventListener("submit", async (e) => {
            e.preventDefault();
            const userInDatabase = usernameLogin.value;
            const response = await fetch(`http://localhost:3001/api/v1/users/username/${userInDatabase}`);
            const user = await response.text();

            let userExist;
            if (user) {
                userExist = JSON.parse(user);
            }
            if(!userExist) {
                alert(`Could not find user with username '${userInDatabase}'`);
                loggedIn.textContent = `Could not find user with username '${userInDatabase}'`
                return;
            }
        
            const credId = userExist.credential_id;
            const authUser = await auth.signIn(credId);
            loggedIn.classList.remove("hidden"); 
            loggedIn.textContent = `Signed in as ${authUser.username} (credential id: ${authUser.credential_id}).`;	
        });
    </script>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            width: 80%;
            max-width: 600px;
            margin: 40px auto;
            padding: 20px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        h2 {
            color: #333;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-bottom: 20px;
        }

        input, button {
            padding: 10px;
            font-size: 16px;
            border: 1px solid #ccc;
            border-radius: 5px;
        }

        input:focus, button:focus {
            border-color: #007bff;
            outline: none;
        }

        button {
            background-color: #007bff;
            color: white;
            cursor: pointer;
            font-weight: bold;
            border: none;
        }

        button:hover {
            background-color: #0056b3;
        }

        label {
            font-weight: bold;
            color: #333;
        }

        .hidden {
            display: none;
        }

        #isLoggedIn {
            font-size: 16px;
            color: green;
            margin-top: 20px;
        }

        #isLoggedIn.hidden {
            display: none;
        }
    </style>
</body>
</html>